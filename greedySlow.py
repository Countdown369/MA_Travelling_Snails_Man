import numpy
import random
import sys
import time

start_time = time.time()

origins = [
    "ABINGTON, MASSACHUSETTS",
    "ACTON, MASSACHUSETTS",
    "ACUSHNET, MASSACHUSETTS",
    "ADAMS, MASSACHUSETTS",
    "AGAWAM, MASSACHUSETTS",
    "ALFORD, MASSACHUSETTS",
    "AMESBURY, MASSACHUSETTS",
    "AMHERST, MASSACHUSETTS",
    "ANDOVER, MASSACHUSETTS",
    "AQUINNAH, MASSACHUSETTS",
    "ARLINGTON, MASSACHUSETTS",
    "ASHBURNHAM, MASSACHUSETTS",
    "ASHBY, MASSACHUSETTS",
    "ASHFIELD, MASSACHUSETTS",
    "ASHLAND, MASSACHUSETTS",
    "ATHOL, MASSACHUSETTS",
    "ATTLEBORO, MASSACHUSETTS",
    "AUBURN, MASSACHUSETTS",
    "AVON, MASSACHUSETTS",
    "AYER, MASSACHUSETTS",
    "BARNSTABLE, MASSACHUSETTS",
    "BARRE, MASSACHUSETTS",
    "BECKET, MASSACHUSETTS",
    "BEDFORD, MASSACHUSETTS",
    "BELCHERTOWN, MASSACHUSETTS",
    "BELLINGHAM, MASSACHUSETTS",
    "BELMONT, MASSACHUSETTS",
    "BERKLEY, MASSACHUSETTS",
    "BERLIN, MASSACHUSETTS",
    "BERNARDSTON, MASSACHUSETTS",
    "BEVERLY, MASSACHUSETTS",
    "BILLERICA, MASSACHUSETTS",
    "BLACKSTONE, MASSACHUSETTS",
    "BLANDFORD, MASSACHUSETTS",
    "BOLTON, MASSACHUSETTS",
    "BOSTON, MASSACHUSETTS",
    "BOURNE, MASSACHUSETTS",
    "BOXBOROUGH, MASSACHUSETTS",
    "BOXFORD, MASSACHUSETTS",
    "BOYLSTON, MASSACHUSETTS",
    "BRAINTREE, MASSACHUSETTS",
    "BREWSTER, MASSACHUSETTS",
    "BRIDGEWATER, MASSACHUSETTS",
    "BRIMFIELD, MASSACHUSETTS",
    "BROCKTON, MASSACHUSETTS",
    "BROOKFIELD, MASSACHUSETTS",
    "BROOKLINE, MASSACHUSETTS",
    "BUCKLAND, MASSACHUSETTS",
    "BURLINGTON, MASSACHUSETTS",
    "CAMBRIDGE, MASSACHUSETTS",
    "CANTON, MASSACHUSETTS",
    "CARLISLE, MASSACHUSETTS",
    "CARVER, MASSACHUSETTS",
    "CHARLEMONT, MASSACHUSETTS",
    "CHARLTON, MASSACHUSETTS",
    "CHATHAM, MASSACHUSETTS",
    "CHELMSFORD, MASSACHUSETTS",
    "CHELSEA, MASSACHUSETTS",
    "CHESHIRE, MASSACHUSETTS",
    "CHESTER, MASSACHUSETTS",
    "CHESTERFIELD, MASSACHUSETTS",
    "CHICOPEE, MASSACHUSETTS",
    "CHILMARK, MASSACHUSETTS",
    "CLARKSBURG, MASSACHUSETTS",
    "CLINTON, MASSACHUSETTS",
    "COHASSET, MASSACHUSETTS",
    "COLRAIN, MASSACHUSETTS",
    "CONCORD, MASSACHUSETTS",
    "CONWAY, MASSACHUSETTS",
    "CUMMINGTON, MASSACHUSETTS",
    "DALTON, MASSACHUSETTS",
    "DANVERS, MASSACHUSETTS",
    "DARTMOUTH, MASSACHUSETTS",
    "DEDHAM, MASSACHUSETTS",
    "DEERFIELD, MASSACHUSETTS",
    "DENNIS, MASSACHUSETTS",
    "DIGHTON, MASSACHUSETTS",
    "DOUGLAS, MASSACHUSETTS",
    "DOVER, MASSACHUSETTS",
    "DRACUT, MASSACHUSETTS",
    "DUDLEY, MASSACHUSETTS",
    "DUNSTABLE, MASSACHUSETTS",
    "DUXBURY, MASSACHUSETTS",
    "EAST BRIDGEWATER, MASSACHUSETTS",
    "EAST BROOKFIELD, MASSACHUSETTS",
    "EAST LONGMEADOW, MASSACHUSETTS",
    "EASTHAM, MASSACHUSETTS",
    "EASTHAMPTON, MASSACHUSETTS",
    "EASTON, MASSACHUSETTS",
    "EDGARTOWN, MASSACHUSETTS",
    "EGREMONT, MASSACHUSETTS",
    "ERVING, MASSACHUSETTS",
    "ESSEX, MASSACHUSETTS",
    "EVERETT, MASSACHUSETTS",
    "FAIRHAVEN, MASSACHUSETTS",
    "FALL RIVER, MASSACHUSETTS",
    "FALMOUTH, MASSACHUSETTS",
    "FITCHBURG, MASSACHUSETTS",
    "FLORIDA, MASSACHUSETTS",
    "FOXBOROUGH, MASSACHUSETTS",
    "FRAMINGHAM, MASSACHUSETTS",
    "FRANKLIN, MASSACHUSETTS",
    "FREETOWN, MASSACHUSETTS",
    "GARDNER, MASSACHUSETTS",
    "GEORGETOWN, MASSACHUSETTS",
    "GILL, MASSACHUSETTS",
    "GLOUCESTER, MASSACHUSETTS",
    "GOSHEN, MASSACHUSETTS",
    "GRAFTON, MASSACHUSETTS",
    "GRANBY, MASSACHUSETTS",
    "GRANVILLE, MASSACHUSETTS",
    "GREAT BARRINGTON, MASSACHUSETTS",
    "GREENFIELD, MASSACHUSETTS",
    "GROTON, MASSACHUSETTS",
    "GROVELAND, MASSACHUSETTS",
    "HADLEY, MASSACHUSETTS",
    "HALIFAX, MASSACHUSETTS",
    "HAMILTON, MASSACHUSETTS",
    "HAMPDEN, MASSACHUSETTS",
    "HANCOCK, MASSACHUSETTS",
    "HANOVER, MASSACHUSETTS",
    "HANSON, MASSACHUSETTS",
    "HARDWICK, MASSACHUSETTS",
    "HARVARD, MASSACHUSETTS",
    "HARWICH, MASSACHUSETTS",
    "HATFIELD, MASSACHUSETTS",
    "HAVERHILL, MASSACHUSETTS",
    "HAWLEY, MASSACHUSETTS",
    "HEATH, MASSACHUSETTS",
    "HINGHAM, MASSACHUSETTS",
    "HINSDALE, MASSACHUSETTS",
    "HOLBROOK, MASSACHUSETTS",
    "HOLDEN, MASSACHUSETTS",
    "HOLLAND, MASSACHUSETTS",
    "HOLLISTON, MASSACHUSETTS",
    "HOLYOKE, MASSACHUSETTS",
    "HOPEDALE, MASSACHUSETTS",
    "HOPKINTON, MASSACHUSETTS",
    "HUBBARDSTON, MASSACHUSETTS",
    "HUDSON, MASSACHUSETTS",
    "HULL, MASSACHUSETTS",
    "HUNTINGTON, MASSACHUSETTS",
    "IPSWICH, MASSACHUSETTS",
    "KINGSTON, MASSACHUSETTS",
    "LAKEVILLE, MASSACHUSETTS",
    "LANCASTER, MASSACHUSETTS",
    "LANESBOROUGH, MASSACHUSETTS",
    "LAWRENCE, MASSACHUSETTS",
    "LEE, MASSACHUSETTS",
    "LEICESTER, MASSACHUSETTS",
    "LENOX, MASSACHUSETTS",
    "LEOMINSTER, MASSACHUSETTS",
    "LEVERETT, MASSACHUSETTS",
    "LEXINGTON, MASSACHUSETTS",
    "LEYDEN, MASSACHUSETTS",
    "LINCOLN, MASSACHUSETTS",
    "LITTLETON, MASSACHUSETTS",
    "LONGMEADOW, MASSACHUSETTS",
    "LOWELL, MASSACHUSETTS",
    "LUDLOW, MASSACHUSETTS",
    "LUNENBURG, MASSACHUSETTS",
    "LYNN, MASSACHUSETTS",
    "LYNNFIELD, MASSACHUSETTS",
    "MALDEN, MASSACHUSETTS",
    "MANCHESTER-BY-THE-SEA, MASSACHUSETTS",
    "MANSFIELD, MASSACHUSETTS",
    "MARBLEHEAD, MASSACHUSETTS",
    "MARION, MASSACHUSETTS",
    "MARLBOROUGH, MASSACHUSETTS",
    "MARSHFIELD, MASSACHUSETTS",
    "MASHPEE, MASSACHUSETTS",
    "MATTAPOISETT, MASSACHUSETTS",
    "MAYNARD, MASSACHUSETTS",
    "MEDFIELD, MASSACHUSETTS",
    "MEDFORD, MASSACHUSETTS",
    "MEDWAY, MASSACHUSETTS",
    "MELROSE, MASSACHUSETTS",
    "MENDON, MASSACHUSETTS",
    "MERRIMAC, MASSACHUSETTS",
    "METHUEN, MASSACHUSETTS",
    "MIDDLEBOROUGH, MASSACHUSETTS",
    "MIDDLEFIELD, MASSACHUSETTS",
    "MIDDLETON, MASSACHUSETTS",
    "MILFORD, MASSACHUSETTS",
    "MILLBURY, MASSACHUSETTS",
    "MILLIS, MASSACHUSETTS",
    "MILLVILLE, MASSACHUSETTS",
    "MILTON, MASSACHUSETTS",
    "MONROE, MASSACHUSETTS",
    "MONSON, MASSACHUSETTS",
    "MONTAGUE, MASSACHUSETTS",
    "MONTEREY, MASSACHUSETTS",
    "MONTGOMERY, MASSACHUSETTS",
    "MOUNT WASHINGTON, MASSACHUSETTS",
    "NAHANT, MASSACHUSETTS",
    "NANTUCKET, MASSACHUSETTS",
    "NATICK, MASSACHUSETTS",
    "NEEDHAM, MASSACHUSETTS",
    "NEW ASHFORD, MASSACHUSETTS",
    "NEW BEDFORD, MASSACHUSETTS",
    "NEW BRAINTREE, MASSACHUSETTS",
    "NEW MARLBOROUGH, MASSACHUSETTS",
    "NEW SALEM, MASSACHUSETTS",
    "NEWBURY, MASSACHUSETTS",
    "NEWBURYPORT, MASSACHUSETTS",
    "NEWTON, MASSACHUSETTS",
    "NORFOLK, MASSACHUSETTS",
    "NORTH ADAMS, MASSACHUSETTS",
    "NORTH ANDOVER, MASSACHUSETTS",
    "NORTH ATTLEBOROUGH, MASSACHUSETTS",
    "NORTH BROOKFIELD, MASSACHUSETTS",
    "NORTH READING, MASSACHUSETTS",
    "NORTHAMPTON, MASSACHUSETTS",
    "NORTHBOROUGH, MASSACHUSETTS",
    "NORTHBRIDGE, MASSACHUSETTS",
    "NORTHFIELD, MASSACHUSETTS",
    "NORTON, MASSACHUSETTS",
    "NORWELL, MASSACHUSETTS",
    "NORWOOD, MASSACHUSETTS",
    "OAK BLUFFS, MASSACHUSETTS",
    "OAKHAM, MASSACHUSETTS",
    "ORANGE, MASSACHUSETTS",
    "ORLEANS, MASSACHUSETTS",
    "OTIS, MASSACHUSETTS",
    "OXFORD, MASSACHUSETTS",
    "PALMER, MASSACHUSETTS",
    "PAXTON, MASSACHUSETTS",
    "PEABODY, MASSACHUSETTS",
    "PELHAM, MASSACHUSETTS",
    "PEMBROKE, MASSACHUSETTS",
    "PEPPERELL, MASSACHUSETTS",
    "PERU, MASSACHUSETTS",
    "PETERSHAM, MASSACHUSETTS",
    "PHILLIPSTON, MASSACHUSETTS",
    "PITTSFIELD, MASSACHUSETTS",
    "PLAINFIELD, MASSACHUSETTS",
    "PLAINVILLE, MASSACHUSETTS",
    "PLYMOUTH, MASSACHUSETTS",
    "PLYMPTON, MASSACHUSETTS",
    "PRINCETON, MASSACHUSETTS",
    "PROVINCETOWN, MASSACHUSETTS",
    "QUINCY, MASSACHUSETTS",
    "RANDOLPH, MASSACHUSETTS",
    "RAYNHAM, MASSACHUSETTS",
    "READING, MASSACHUSETTS",
    "REHOBOTH, MASSACHUSETTS",
    "REVERE, MASSACHUSETTS",
    "RICHMOND, MASSACHUSETTS",
    "ROCHESTER, MASSACHUSETTS",
    "ROCKLAND, MASSACHUSETTS",
    "ROCKPORT, MASSACHUSETTS",
    "ROWE, MASSACHUSETTS",
    "ROWLEY, MASSACHUSETTS",
    "ROYALSTON, MASSACHUSETTS",
    "RUSSELL, MASSACHUSETTS",
    "RUTLAND, MASSACHUSETTS",
    "SALEM, MASSACHUSETTS",
    "SALISBURY, MASSACHUSETTS",
    "SANDISFIELD, MASSACHUSETTS",
    "SANDWICH, MASSACHUSETTS",
    "SAUGUS, MASSACHUSETTS",
    "SAVOY, MASSACHUSETTS",
    "SCITUATE, MASSACHUSETTS",
    "SEEKONK, MASSACHUSETTS",
    "SHARON, MASSACHUSETTS",
    "SHEFFIELD, MASSACHUSETTS",
    "SHELBURNE, MASSACHUSETTS",
    "SHERBORN, MASSACHUSETTS",
    "SHIRLEY, MASSACHUSETTS",
    "SHREWSBURY, MASSACHUSETTS",
    "SHUTESBURY, MASSACHUSETTS",
    "SOMERSET, MASSACHUSETTS",
    "SOMERVILLE, MASSACHUSETTS",
    "SOUTH HADLEY, MASSACHUSETTS",
    "SOUTHAMPTON, MASSACHUSETTS",
    "SOUTHBOROUGH, MASSACHUSETTS",
    "SOUTHBRIDGE, MASSACHUSETTS",
    "SOUTHWICK, MASSACHUSETTS",
    "SPENCER, MASSACHUSETTS",
    "SPRINGFIELD, MASSACHUSETTS",
    "STERLING, MASSACHUSETTS",
    "STOCKBRIDGE, MASSACHUSETTS",
    "STONEHAM, MASSACHUSETTS",
    "STOUGHTON, MASSACHUSETTS",
    "STOW, MASSACHUSETTS",
    "STURBRIDGE, MASSACHUSETTS",
    "SUDBURY, MASSACHUSETTS",
    "SUNDERLAND, MASSACHUSETTS",
    "SUTTON, MASSACHUSETTS",
    "SWAMPSCOTT, MASSACHUSETTS",
    "SWANSEA, MASSACHUSETTS",
    "TAUNTON, MASSACHUSETTS",
    "TEMPLETON, MASSACHUSETTS",
    "TEWKSBURY, MASSACHUSETTS",
    "TISBURY, MASSACHUSETTS",
    "TOLLAND, MASSACHUSETTS",
    "TOPSFIELD, MASSACHUSETTS",
    "TOWNSEND, MASSACHUSETTS",
    "TRURO, MASSACHUSETTS",
    "TYNGSBOROUGH, MASSACHUSETTS",
    "TYRINGHAM, MASSACHUSETTS",
    "UPTON, MASSACHUSETTS",
    "UXBRIDGE, MASSACHUSETTS",
    "WAKEFIELD, MASSACHUSETTS",
    "WALES, MASSACHUSETTS",
    "WALPOLE, MASSACHUSETTS",
    "WALTHAM, MASSACHUSETTS",
    "WARE, MASSACHUSETTS",
    "WAREHAM, MASSACHUSETTS",
    "WARREN, MASSACHUSETTS",
    "WARWICK, MASSACHUSETTS",
    "WASHINGTON, MASSACHUSETTS",
    "WATERTOWN, MASSACHUSETTS",
    "WAYLAND, MASSACHUSETTS",
    "WEBSTER, MASSACHUSETTS",
    "WELLESLEY, MASSACHUSETTS",
    "WELLFLEET, MASSACHUSETTS",
    "WENDELL, MASSACHUSETTS",
    "WENHAM, MASSACHUSETTS",
    "WEST BOYLSTON, MASSACHUSETTS",
    "WEST BRIDGEWATER, MASSACHUSETTS",
    "WEST BROOKFIELD, MASSACHUSETTS",
    "WEST NEWBURY, MASSACHUSETTS",
    "WEST SPRINGFIELD, MASSACHUSETTS",
    "WEST STOCKBRIDGE, MASSACHUSETTS",
    "WEST TISBURY, MASSACHUSETTS",
    "WESTBOROUGH, MASSACHUSETTS",
    "WESTFIELD, MASSACHUSETTS",
    "WESTFORD, MASSACHUSETTS",
    "WESTHAMPTON, MASSACHUSETTS",
    "WESTMINSTER, MASSACHUSETTS",
    "WESTON, MASSACHUSETTS",
    "WESTPORT, MASSACHUSETTS",
    "WESTWOOD, MASSACHUSETTS",
    "WEYMOUTH, MASSACHUSETTS",
    "WHATELY, MASSACHUSETTS",
    "WHITMAN, MASSACHUSETTS",
    "WILBRAHAM, MASSACHUSETTS",
    "WILLIAMSBURG, MASSACHUSETTS",
    "WILLIAMSTOWN, MASSACHUSETTS",
    "WILMINGTON, MASSACHUSETTS",
    "WINCHENDON, MASSACHUSETTS",
    "WINCHESTER, MASSACHUSETTS",
    "WINDSOR, MASSACHUSETTS",
    "WINTHROP, MASSACHUSETTS",
    "WOBURN, MASSACHUSETTS",
    "WORCESTER, MASSACHUSETTS",
    "WORTHINGTON, MASSACHUSETTS",
    "WRENTHAM, MASSACHUSETTS",
    "YARMOUTH, MASSACHUSETTS",
]


#labels is used for the names of the serialized list (.txt) files.
#These strings are town names without the phrase ", MASSACHUSETTS".
labels = ["town"] * 350
for s in range(350):
    labels[s] = (origins[s])[:-15]
editableLabels = labels

distances = [[] for k in range(350)]

for txtfile in labels:
    for line in open(('maDistsLists/' + txtfile + '.txt'), 'r'):
        value = float(line[:-1])
        distances[labels.index(txtfile)].append(value)

#List of numbers 0-349, indicies of any list of length 350 (i.e. labels)
numbers = list(range(350))

takenNumbers = [None] * 350
currentDistances = [None] * 350
savedIndicies = [None] * 350

#Origin and final point is 40th index, Braintree, MA.
takenNumbers[0] = 40
takenNumbers[349] = 40
#After each complete cycle, takenNumbers will have the route in order.

largestSum = 0
currentSum = 0
randomNum  = 0

def clearTakenNumbers(took):
    took = [None] * 350
    took[0] = 40
    took[349] = 40

def firstContainsLast(the_list, element):
    for item in range(0, len(the_list)):
        if element == the_list[item]:
            return True
    return False

def greedy2(t, r, l):
    testList = l.copy()
    #import pdb; pdb.set_trace()
    print(len(locListCopy))
    r = locListCopy.index(max(testList))
    if firstContainsLast(t, r):
        testList.remove(max(testList))
        return greedy2(t, r, testList)
    return r

for i in range(349):
    locList = distances[takenNumbers[i]].copy()
    locListCopy = locList.copy()
    randomNum = greedy2(takenNumbers, randomNum, locListCopy)
    takenNumbers[i + 1] = randomNum
    try:
        currentDistances[i] = float((distances[takenNumbers[i]])[randomNum])
    except IndexError:
        print("locListCopy is " + str(len(distances[(takenNumbers[i])])) + " elements long, but")
        print("randomNum is " + str(randomNum) + ".")
        print()
    if i == 348:
        currentDistances[349] = float((distances[takenNumbers[i]])[40])
        
#print(currentDistances)   
currentSum = sum(filter(lambda q: isinstance(q, float), currentDistances)) 
currentDistances = [None] * 350
print(currentSum)
if currentSum > largestSum:
    largestSum = currentSum
    savedIndicies = takenNumbers
    for listitem in savedIndicies[1:]:
        open(('bestRoutes/' + 'greedy' + '.txt'), 'a').write(labels[listitem] + ', ')
    clearTakenNumbers(takenNumbers)
    if len(savedIndicies) == len(set(savedIndicies)):
        if len(savedIndicies) == 350:
            print("THIS LIST FULFILLS ALL CRITERIA OF A NEW LONGEST ROUTE AND HAS BEEN SAVED.")
            #print("Done: " + str(p + 1) + "/" + str(n) + " (" + str(float(p/n) * 100) + "%)")
else:
    clearTakenNumbers(takenNumbers)
    if len(savedIndicies) == len(set(savedIndicies)):
        if len(savedIndicies) == 350:
            print("This list fulfills the criteria of a route list, but is too short.")
            #print("Done: " + str(p + 1) + "/" + str(n) + " (" + str(float(p/n) * 100) + "%)")
print(savedIndicies)
print("This program took " + str(time.time() - start_time) + " seconds to run")
